import { createWrapper } from "next-redux-wrapper";
import { applyMiddleware, compose, createStore } from "redux";
import { composeWithDevTools } from "redux-devtools-extension";
import createSagaMiddleware from "redux-saga";
import rootSaga from "../sagas";

import reducer from "../reducers/index";

const loggerMiddleware = ({ dispatch, getState }) => (next) => (action) => {
  console.log(action);
  return next(action);
};

export const configureStore = () => {
  const sagaMiddleware = createSagaMiddleware();
  let middlewares: any = [sagaMiddleware];
  if (process.env.NODE_ENV == 'development') middlewares = [...middlewares, loggerMiddleware];
  const enhancer = process.env.NODE_ENV == "production" ? compose(applyMiddleware(...middlewares)) : composeWithDevTools(applyMiddleware(...middlewares));
  const store: any = createStore(reducer, enhancer);

  store.sagaTask = sagaMiddleware.run(rootSaga);
  return store;
};

const wrapper = createWrapper(configureStore, {
  debug: process.env.NODE_ENV == "development",
});

export default wrapper;
