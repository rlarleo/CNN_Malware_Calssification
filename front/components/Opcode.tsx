import { useEffect, useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import { BYTE_TO_OPCODE_REQUEST } from "reducers/file";
import { RootState } from "../reducers";
import styles from "../styles/byteToOpcode.module.scss";

const Opcode = ({ bytefile }) => {
  const dispatch = useDispatch();
  const { opCode, strIdx, endIdx, exploitName } = useSelector((state: RootState) => state.File);
  const onClickOpCheck = () => {
    dispatch({
      type: BYTE_TO_OPCODE_REQUEST,
      data: {
        fileName: bytefile.name,
        strIdx: strIdx,
        endIdx: endIdx,
      },
    });
  };
  function saveAsFile(str, filename) {
    var hiddenElement = document.createElement("a");
    hiddenElement.href = "data:attachment/text," + encodeURI(str);
    hiddenElement.target = "_blank";
    hiddenElement.download = filename;
    hiddenElement.click();
  }
  const onClickOpDownload = () => {
    if (opCode != null) {
      saveAsFile(opCode, "opCode.txt");
    }
  };

  return (
    <>
      {strIdx != null && (
        <div className={styles.opcode_check_wrapper}>
          <div className={styles.opcode_check_button} onClick={onClickOpCheck}>
            <span>변환된 OP Code 확인하기</span>
          </div>
          <div className={styles.exploit_code_name}>
            <span>악성코드 종류 : {exploitName != null && exploitName}</span>
          </div>
          {opCode != null && (
            <div className={styles.opcode_download} onClick={onClickOpDownload}>
              op code .txt 파일로 다운로드받기
            </div>
          )}
          <div className={styles.opcode_wrapper}>
            {opCode != null && (
              <>
                <pre>{opCode}</pre>
              </>
            )}
          </div>
        </div>
      )}
    </>
  );
};

export default Opcode;
