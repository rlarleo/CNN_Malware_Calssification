import produce from "immer";

const initialState = {
  byteFile: null,
  fileName: null,
  opCode: null,
  strIdx: null,
  endIdx: null,
  exploitName: null,
  heatMap: null,

  fileSendDone: false,
  fileSendLoading: false,
  fileSendError: null,

  byteCodeIndexDone: false,
  byteCodeIndexLoading: false,
  byteCodeIndexError: null,

  opCodeGetDone: false,
  opCodeGetLoading: false,
  opCodeGetError: null,

  getHeatMapDone: false,
  getHeatMapLoading: false,
  getHeatMapError: null,
};

export const RESET_REQUEST = "RESET_REQUEST";

export const FILE_SEND_REQUEST = "FILE_SEND_REQUEST";
export const FILE_SEND_SUCCESS = "FILE_SEND_SUCCESS";
export const FILE_SEND_FAILURE = "FILE_SEND_FAILURE";

export const BYTECODE_INDEX_REQUEST = "BYTECODE_INDEX_REQUEST";
export const BYTECODE_INDEX_SUCCESS = "BYTECODE_INDEX_SUCCESS";
export const BYTECODE_INDEX_FAILURE = "BYTECODE_INDEX_FAILURE";

export const BYTE_TO_OPCODE_REQUEST = "BYTE_TO_OPCODE_REQUEST";
export const BYTE_TO_OPCODE_SUCCESS = "BYTE_TO_OPCODE_SUCCESS";
export const BYTE_TO_OPCODE_FAILURE = "BYTE_TO_OPCODE_FAILURE";

export const SET_HEATMAP_REQUEST = "SET_HEATMAP_REQUEST";
export const SET_HEATMAP_SUCCESS = "SET_HEATMAP_SUCCESS";
export const SET_HEATMAP_FAILURE = "SET_HEATMAP_FAILURE";

const File = (state = initialState, action: any) =>
  produce(state, (draft) => {
    switch (action.type) {
      case RESET_REQUEST:
        draft.byteFile = null;
        draft.fileName = null;
        draft.opCode = null;
        draft.strIdx = null;
        draft.endIdx = null;
        draft.exploitName = null;
        draft.heatMap = null;
        break;
      case FILE_SEND_REQUEST:
        draft.byteFile = action.data.file;
        draft.fileName = action.data.fileName;
        draft.fileSendDone = false;
        draft.fileSendLoading = true;
        draft.fileSendError = null;
        break;
      case FILE_SEND_SUCCESS:
        draft.fileSendDone = true;
        draft.fileSendLoading = false;
        draft.fileSendError = null;
        break;
      case FILE_SEND_FAILURE:
        draft.fileSendDone = false;
        draft.fileSendLoading = false;
        draft.fileSendError = action.error;
        break;
      case SET_HEATMAP_REQUEST:
        draft.heatMap = process.env.NEXT_PUBLIC_API_BASE_URL + `/gradCAM?file=${action.data.fileName}`;
        draft.getHeatMapDone = false;
        draft.getHeatMapLoading = true;
        draft.getHeatMapError = null;
        break;
      case SET_HEATMAP_SUCCESS:
        draft.getHeatMapDone = true;
        draft.getHeatMapLoading = false;
        draft.getHeatMapError = null;
        break;
      case SET_HEATMAP_FAILURE:
        draft.getHeatMapDone = false;
        draft.getHeatMapLoading = false;
        draft.getHeatMapError = action.error;
        break;
      case BYTECODE_INDEX_REQUEST:
        draft.byteCodeIndexDone = false;
        draft.byteCodeIndexLoading = true;
        draft.byteCodeIndexError = null;
        break;
      case BYTECODE_INDEX_SUCCESS:
        draft.strIdx = action.data.strIdx;
        draft.endIdx = action.data.endIdx;
        draft.exploitName = action.data.exploitName;
        draft.byteCodeIndexDone = true;
        draft.byteCodeIndexLoading = false;
        draft.byteCodeIndexError = null;
        break;
      case BYTECODE_INDEX_FAILURE:
        draft.byteCodeIndexDone = false;
        draft.byteCodeIndexLoading = false;
        draft.byteCodeIndexError = action.error;
        break;
      case BYTE_TO_OPCODE_REQUEST:
        draft.opCodeGetDone = false;
        draft.opCodeGetLoading = true;
        draft.opCodeGetError = null;
        break;
      case BYTE_TO_OPCODE_SUCCESS:
        draft.opCode = action.data.opcode;
        draft.opCodeGetDone = true;
        draft.opCodeGetLoading = false;
        draft.opCodeGetError = null;
        break;
      case BYTE_TO_OPCODE_FAILURE:
        draft.opCodeGetDone = false;
        draft.opCodeGetLoading = false;
        draft.opCodeGetError = action.error;
        break;
      default:
        break;
    }
  });

export default File;
