"use strict";
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HashMap = void 0;
var mergeMap_1 = require("./mergeMap");
// A map which allows object keys
var HashMap = /** @class */ (function () {
    function HashMap() {
        this.map = new Map();
        return this;
    }
    HashMap.prototype.set = function (key, val) {
        var _key = JSON.stringify(key);
        this.map.set(_key, val);
        return this;
    };
    HashMap.prototype.get = function (key) {
        var _key = JSON.stringify(key);
        return this.map.get(_key);
    };
    HashMap.prototype.internalMap = function () {
        return this.map;
    };
    HashMap.prototype.concat = function () {
        var maps = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            maps[_i] = arguments[_i];
        }
        var mapArr = maps.map(function (m) { return m.internalMap(); });
        this.map = mergeMap_1.mergeMap.apply(void 0, __spreadArrays(mapArr, [this.map]));
        return this;
    };
    HashMap.prototype.forEach = function (fn) {
        this.map.forEach(function (v, k) {
            var key = JSON.parse(k);
            fn(key, v);
        });
    };
    return HashMap;
}());
exports.HashMap = HashMap;
