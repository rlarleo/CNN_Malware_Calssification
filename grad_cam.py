import os
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'
import cv2
import numpy as np
import matplotlib.pyplot as plt
from tensorflow.keras.models import Model
import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator

def run_grad_cam(filename):
    # It can be used to reconstruct the model identically.
    # from keras.models import load_model
    model = tf.keras.models.load_model(
        "cnn_model", custom_objects=None, compile=True, options=None
    )

    weights = model.layers[-1].get_weights()[0]
    model2 = Model(inputs=model.input, outputs=[model.layers[11].output, model.output])
    print(filename)
    img = cv2.imread(filename)
    img_height = img.shape[0]
    img_width = img.shape[0]

    print('image', img_height)
    img = cv2.resize(img, (img_width, 2048))
    x = img.copy()
    x.astype(np.float32)
    x = x / 255.0
    [base_model_outputs, prediction] = model2.predict(np.expand_dims(x, axis=0))
    prediction = prediction[0]
    base_model_outputs = base_model_outputs[0]
    plt.subplot(1, 1, 1)
    # print(base_model_outputs)
    cam = (prediction - 0.5) * np.matmul(base_model_outputs, weights)
    cam -= cam.min()
    cam /= cam.max()
    cam -= 0.2
    cam /= 0.8

    cam = cv2.resize(cam, (img_width, 2048))
    heatmap = cv2.applyColorMap(np.uint8(255 * cam), cv2.COLORMAP_JET)
    heatmap[np.where(cam <= 0.2)] = 0
    out = cv2.addWeighted(img, 0.8, heatmap, 0.4, 0)
    out = cv2.resize(out, (img_width, img_height))
    myHeatmap = cv2.addWeighted(img, 0, heatmap, 1, 0)
    out2 = cv2.resize(myHeatmap, (img_width, img_height))
    plt.axis('off')
    plt.imshow(out2[:, :, ::-1])
    np.save('heatmap.npy', out2)
    plt.show()

    test_datagen = ImageDataGenerator(rescale=1. / 255)
    testGenSet = test_datagen.flow_from_directory(
        "UploadMalware/Image",
        target_size=(2024, 256),
        color_mode="rgb",
        class_mode='categorical',
        batch_size=32,
    )

    predict_m = model.predict(testGenSet)
    classes_x = np.argmax(predict_m, axis=1)
    print(classes_x + 1)
