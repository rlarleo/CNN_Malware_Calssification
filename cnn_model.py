#Import all required libraries
import os
#os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'
import tensorflow as tf
import numpy as np

def cnn():
    #set a random seed for reproducability
    seed= 42
    np.random.seed(seed)

    image_width = 256
    image_height = None
    if tf.keras.backend.image_data_format() == 'channels_first':
        input_shape = (1,image_width,None)
    else:
        input_shape = (image_width,None,1)

    print(input_shape)

    #Model Architecture
    with tf.device('/device:GPU:0'):
        model = tf.keras.models.Sequential([
            tf.keras.layers.Conv2D(16,(3,3),activation='relu',padding="same",input_shape=(256,None,1)),
            tf.keras.layers.MaxPooling2D(2,2),
            tf.keras.layers.Conv2D(32,(3,3),activation='relu',padding="same"),
            tf.keras.layers.MaxPooling2D(2,2),
            tf.keras.layers.Conv2D(64,(3,3),activation='relu'),
            tf.keras.layers.MaxPooling2D(2,2),
            tf.keras.layers.Conv2D(64,(3,3),activation='relu'),
            tf.keras.layers.MaxPooling2D(2,2),
            tf.keras.layers.Conv2D(64,(3,3),activation='relu'),
            tf.keras.layers.MaxPooling2D(2,2),
            tf.keras.layers.GlobalMaxPool2D(),
            tf.keras.layers.Dense(256,activation='relu'),
            tf.keras.layers.Dropout(0.2),
            tf.keras.layers.Dense(9,activation='sigmoid')
        ])


        model.summary()

        from tensorflow.keras.optimizers import RMSprop
        model.compile(optimizer = RMSprop(learning_rate=0.001),loss='binary_crossentropy',metrics=['accuracy'])
        print("CNN model complied")
        #rescaling the data to feed the images from directories
        from tensorflow.keras.preprocessing.image import ImageDataGenerator
        train_datagen=ImageDataGenerator(rescale=1./255)
        test_datagen=ImageDataGenerator(rescale=1./255)
        trainGenSet = train_datagen.flow_from_directory(
            "images/train/malware",
            target_size=(256,256),
            color_mode="grayscale",
            class_mode='categorical',
            batch_size=32,
        )
        testGenSet = test_datagen.flow_from_directory(
            "images/val/malware",
            target_size=(256,256),
            color_mode="grayscale",
            class_mode='categorical',
            batch_size=32,
        )

        #모델 학습 설정
        model.compile(loss='categorical_crossentropy',
                     optimizer='adam',
                     metrics=['accuracy'])

        # fig_generator
        model.fit(
            trainGenSet,
            steps_per_epoch=250,
            epochs=40,
            #validation_data=testGenSet,
            #validation_steps=10,
        )

        scores = model.evaluate(testGenSet)
        print(scores)
